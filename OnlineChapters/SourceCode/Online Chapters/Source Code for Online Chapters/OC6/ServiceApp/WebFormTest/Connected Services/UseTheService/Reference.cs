//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebFormTest.UseTheService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputType", Namespace="http://schemas.datacontract.org/2004/07/ANewService")]
    [System.SerializableAttribute()]
    public partial class InputType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Value1ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Value2ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value1Value {
            get {
                return this.Value1ValueField;
            }
            set {
                if ((this.Value1ValueField.Equals(value) != true)) {
                    this.Value1ValueField = value;
                    this.RaisePropertyChanged("Value1Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value2Value {
            get {
                return this.Value2ValueField;
            }
            set {
                if ((this.Value2ValueField.Equals(value) != true)) {
                    this.Value2ValueField = value;
                    this.RaisePropertyChanged("Value2Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultType", Namespace="http://schemas.datacontract.org/2004/07/ANewService")]
    [System.SerializableAttribute()]
    public partial class ResultType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResultValue {
            get {
                return this.ResultValueField;
            }
            set {
                if ((this.ResultValueField.Equals(value) != true)) {
                    this.ResultValueField = value;
                    this.RaisePropertyChanged("ResultValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UseTheService.TheService")]
    public interface TheService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TheService/DoAdd", ReplyAction="http://tempuri.org/TheService/DoAddResponse")]
        int DoAdd(int Value1, int Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TheService/DoAdd", ReplyAction="http://tempuri.org/TheService/DoAddResponse")]
        System.Threading.Tasks.Task<int> DoAddAsync(int Value1, int Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TheService/DoAddUsingDataContract", ReplyAction="http://tempuri.org/TheService/DoAddUsingDataContractResponse")]
        WebFormTest.UseTheService.ResultType DoAddUsingDataContract(WebFormTest.UseTheService.InputType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TheService/DoAddUsingDataContract", ReplyAction="http://tempuri.org/TheService/DoAddUsingDataContractResponse")]
        System.Threading.Tasks.Task<WebFormTest.UseTheService.ResultType> DoAddUsingDataContractAsync(WebFormTest.UseTheService.InputType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TheServiceChannel : WebFormTest.UseTheService.TheService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TheServiceClient : System.ServiceModel.ClientBase<WebFormTest.UseTheService.TheService>, WebFormTest.UseTheService.TheService {
        
        public TheServiceClient() {
        }
        
        public TheServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TheServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TheServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TheServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int DoAdd(int Value1, int Value2) {
            return base.Channel.DoAdd(Value1, Value2);
        }
        
        public System.Threading.Tasks.Task<int> DoAddAsync(int Value1, int Value2) {
            return base.Channel.DoAddAsync(Value1, Value2);
        }
        
        public WebFormTest.UseTheService.ResultType DoAddUsingDataContract(WebFormTest.UseTheService.InputType composite) {
            return base.Channel.DoAddUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WebFormTest.UseTheService.ResultType> DoAddUsingDataContractAsync(WebFormTest.UseTheService.InputType composite) {
            return base.Channel.DoAddUsingDataContractAsync(composite);
        }
    }
}
